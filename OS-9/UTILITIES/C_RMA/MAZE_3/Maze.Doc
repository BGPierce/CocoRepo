This is just a simple program that draws and graphically solves a maze.It was originally a "screen saver" program on a Sun Workstation andis quite interesting to watch.  The largest strain on any systemis power up and power down.  Instead, just run this program (with a lowerpriority if you have other tasks doing background stuff).  The maze shiftsslightly with each new one so that the walls are not continuously atthe same spot on the screen.  No spot of phosphor is lit for morethan 50% (approx.) of the time.  Enjoy, and let me know if you haveany questions.                                           Brian C. White                                           ( BRIANWHITE )Version (edition) 3 has been modified by Gene Heskett, Delphi's WOAY, foruse on 25 line screens. I thought for a few minutes that Brian had made acodeing error where the next maze's position is being calculated, but thatturned out to be my system, it won't use line 199+ in a draw command! This'25' line screen vesrion now uses line 198 every 7th time thru the loopresulting in no loss of the bottom line (pun intended).     I've also reworked the square drawing function so that it detects theedge of the screen and modifies the draw params to prevent overflow andsubsequent no-ops in the gfx primatives of the libraries.. It thereforedraws the entrance square all the time but may restrict the outer edge tomatch the outer edge of the available screen if the screen as drawn isat full shift and against the same edge the entrance marker is in.Not Brians fault, and now I'm trying to find out why a 200 line grfdrv isa 199 line grfdrv.  It runs just fine otherwise, and makes an interestingdemo. There are two versions here, both compiled with Mike Sweets cgfx7.llibrary, and maze63 also used Boisy's cmath63.l for native mode systemsonly. That one may be a hair faster.  It's hard to tell any real speeduphere since the cpu spends far more time in grfdrv doing the gfx primativesthan it does in this routines code.  Cheers, Gene Heskett, WOAY