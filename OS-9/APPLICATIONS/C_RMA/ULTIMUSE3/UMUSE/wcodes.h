/* WCODES.H  for Piped VDG-Umuse (Wmuse) begun 88/11/1* Codes listed with no intervening blank space use same args list.* Args are all Bytes; a few may be Signed.* See NOTES/short.codes for further info*//* ----Overall Constants ----- */#define   MAXCODE   0xD2 /* highest cmd code; KEEP UP-TO-DATE!! */#define   T          1   /* True */#define   F          0   /* false *//* BitBLT Logic-type codes */#define DRAW   1#define ERASE  0#define OR     DRAW#define DYNA   2#define XOR    3/* ----Greasy Fundamental Cmds ------ */#define EOT  0x1B /*    ESC == End-of-File.  Effects unclear. */#define DIE  0xFE /* Terminate -- finished with Graphics pipeline. */#define EOC  0x80 /* End of command (may or may not be used) */#define ALOV 0x81 /* Allocate one "VDG" screen, but don't show it yet */#define SHOV 0x82 /* SHOw (display) the VDG screen */#define HIDV 0x83 /* Hide (Un-display)  the VDG screen, show 32x16 text */#define DALV 0x84 /* De-Allocate VDG screen memory */#define ALTW 0x85 /* Open and switch to ALTernate Window (text only) */#define BTXT 0x86 /* Back to VDG screen or 32x16 text *//* none */#define PAL  0x87 /* Palette(slot, rgb) *//* ----Setups & Definitions------ */#define DEFS 0x88 /* {re-}Define_staff(staffnum, clef, Y) */#define UDFS 0x89 /* Undefine_staff(staffnum) */#define DEFP 0x8A /* DEFINE (or REDEFINE) PART *//* partnum, staffnum, philo (top/mid/bot), noflags, norests, maxchord */#define UDFP 0x8B /* UNDEFINE (FORGET) PART *//*  partnum */#define SKS  0x8C /* SetKeySig(keysig) */#define STS  0x8E /* SetTimeSig(numer, denom) *//* spare 8D, 8F *//* ----Clears & Refreshers----- */#define CLA  0x90 /* Clear All (PCLS) to given color byte *//* color */#define CSS  0x91 /* Clear Score portion of Screen to background *//* none */#define DREP 0x92 /* draw Brush rep.  If note, must have been DFRN'ed *//* xc, y, what, bool repsave */#define EREP 0x93 /* Erase_Rep() by PUTting repsave over recalled x,y */#define DFRN 0x94 /* define Rep Note, but don't draw *//* slot, dur, durmod, artic */#define SCRL 0x95  /* scroll *//* (nevhi,nevlo, lftindhi,lftindlo, ritindhi,ritindlo) */#define SCRM 0x96    /* Mouse pushing scroll bar, scaled 0-255 *//* howmuch 0--255 */#define MBAR 0x97  /* draw_menbar() */#define MBRD 0x98  /* mainbord() */#define RFTB 0x99  /* drtools(Y, type(0=notes, 1=rests), bool_triplets) *//* ----Cursor (mouse) stuff----- */#define SCUR 0x9A /* SetCursorType(curtype) arrow, X, [, ], ^, |, tie) */#define DCUR 0x9B /* DrawCursor(Xhi, Xlo, Y) *//* ----Active Drawing------ */#define DRS  0x9C /* DRAW ONE RANDOM STAFF *//* Y, bool leftline, clef */#define ERS  0x9D /* ERASE ONE RANDOM STAFF for Mouse staff-shifting *//* none; erase most recent DRS job */#define DAS  0x9E /* DRAW ALL STAVES with latest Key Sig *//*  leftbar */#define DRSH 0x9F /* DRAW/ERASE SHORT STAFF given Staff No. for LayMenu *//* StaffNum, Color */#define DNOT 0xA0  /* drawnote* (color,xc,y, dur,durmod,pmod,artic, staffy, stemdn,noflags)*    staffy for ledgers, maybe not used if ledgers() is. */#define DRST 0xA1  /* drawrest(color,xc,y, dur,durmod) */#define DMCH 0xA2  /* draw_MIDI_Chan(X, Y, chan) */#define DAKS 0xA3  /* draw_all_keysigs(xc, ksn) */#define DATS 0xA4  /* draw_all_timesigs(xc, numer, denom) */#define DXLV 0xA5  /* draw_expr_level(X, Y, level) */#define DINS 0xA6  /* draw_instr(X, Y, instnum) */#define DGLI 0xA7  /* draw_global_INCLUSION(X, type, value) eg, Tempo */#define DIAS 0xA8  /* DRAW_INCL_ALL_STAVES(xc, inctype, BCD) */#define ART  0xA9  /* artic(color, xc, y, what, stemdn)  Ties, etc. */#define DCRS 0xAA  /* cresc(xc, level, beats, what) */#define DPEV 0xAB   /* draw part event(x, y, table_slot) *//* ----Placement------ */#define GBG  0xAC /* GET BACKGROUND behind last note erased into buffer */#define PBG  0xAD /* PUT BACKGROUND last Saved by a GBG from buffer */#define ENP  0xAE /* END NOTE PLACEMENT *//* none *//* AF spare */#define GABO 0xB0 /* GIVE/Remove ABORT OPTION *//* bool give */#define SLAY 0xB1 /* Show LAYout (left side, no palettes) *//* bool existing (FALSE==new setup) */#define DLAB 0xB2   /* Draw Label(xc, char1, char2) *//* spare B3 *//* --- Line Drawers --- *//* These X-coordinates definitely shall NOT be rounded to 0-79 */#define HLIN 0xB4 /* hline(X1hi, X1lo, X2hi, X2lo; y, color) */#define VLIN 0xB5 /* vertline(Xhi, Xlo; y1, y2; color) *//* ---- Boxers; these use coarse X's ---- */#define BOX  0xB6 /* Draw box in Foreground color */#define XBOX 0xB7 /* XOR-draw box (2nd time erases) */#define NBOX 0xB8 /* INvert video inside box (flip colors) */#define GBOX 0xB9 /* Gray half-tone inside box *//* (Xc1, y1, Xc2, y2) */#define GET  0xBA  /* Get(xc1, y1, xc2, y2, arrayID) */#define PUT  0xBB  /* Put(xc1, y1, xc2, y2, arrayID, logic)*   logic = draw, erase, dyna, xor */#define CLR  0xBC  /* Clear(xc1, y1, xc2, y2, color)*   color = 0, 1, pattern */#define DSYS 0xBD   /* Draw System Braces */#define SQZ  0xBE   /* Squeze screen vert'ly */#define DMPS 0xBF   /* Dump w/Squeeze *//* Text fcns */#define PHRS 0xC0  /* phrase(xc, y, str)  Print short text line */#define DBCD 0xC1  /* drawbcd(x, y, num) */#define HBCD 0xC2  /* horiz_BCD(x, y, num) */#define PATI 0xC3  /* put up "Patience, don't panic" window */#define MENU 0xC4  /* menu(which) Show given menu */#define MEND 0xC5  /* MenuDone()  Back to score graphics after menu, etc *//* Text overlay window box.  Note the original names! */#define OWST 0xC6  /* OWSet(xc, y, nc, nr, save)  create overlay text window */#define OWEN 0xC7  /* OWEnd() *//* These could all be some general overlay window fcn */#define ALRT 0xC8  /* alertenter(msg)     /* includes hitenter() */#define YSNO 0xC9  /* yesno(prompt, yesmsg, nomsg)  char *all* all strings terminated with ETXT\n  */#define ATXT 0xCA  /* enter auto size mode() */#define ETXT 0xCB  /* end text or autosize, and display() */#define ACUR 0xCC  /* AlfaCURsor(bool onoff) */#define FLSH 0xCD  /* Flush text buffer sto stdout *//* ----Miscellaneous ----------- */#define DUMP 0xCE /* Printer Screen Dump *//* printer_type */#define BEEP 0xCF /* BEEP (TERMINAL BELL) *//*  style (pip, OK_beep, attention_bell, razzberry) *//* --- Beam drawers (3 fcns) 97/4/1 --- */#define BLINE  0xD0 /* BeamLine(x1h,x1l, y1, x2h,x2l, y2) */#define BAGNL  0xD1 /* BeamAgnLine(ydelt) */#define BSEGL  0xD2 /* BeamSegLine(ydelt, xsh,xsl, xeh,xel) *//*****LOW-LEVEL, probably not interfaced, used within Fran only *******yclear(y1, y2, paint)  short y1, y2, paint;*    *FREE CODES (Hex):8D, 8FB3,*D3--DF*E0--EF*F0--FENOTES:PHRS strings are terminated by a newline \n.Others (not just ATXT) are terminated with an ETXTfollowed by a newline that is not printed.Other newlines within the strings do CRLFs to left border of window.Overlay window is used when Bill knows what he's going to print;lines are printed just as given, with auto CRLF as safety.Within an Overlay window, all commands but ETXT and OWND are ignored.Either one terminates the window, which is cleared if Saved on create.Nested windows *may* be legal.Auto-Text mode is flexible way for Bill to printf() formatted messages onthe grafix text screen.  On receipt of the ATXT opcode, Fran reads ASCIIstrings terminated by \n's, counting them and keeping track of thelongest (widest) string so far.When an EOT (possibly ESC) byte follows a \n, Fran computes the requiredwindow size, allocates memory to Get/save the grafix, clears it, andprints the strings.Given the ETXT, Fran Put/restores the grafix. Must try not to say toomuch at once!Build into alert(), yesno(), etc.?*//* eof wcodes.h */