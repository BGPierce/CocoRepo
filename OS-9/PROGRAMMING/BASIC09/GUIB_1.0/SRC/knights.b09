PROCEDURE KnightsREM *REM *    The Knight's TourREM *REM *    This game requires GuiB to be in your CMDS dirREM *    for it to run.  Gfx2 & Syscall should be mergedREM *    with your RunB also.REM *DIM key:STRING[1]DIM xpos,ypos,xsize,ysize,moves,x1,y1,x2,y2,i,j,k,blue,red,xx,yy
:INTEGERDIM legal,board(8,8):BOOLEANDIM poss,loc(8,2),count,order(64,2),redknight(200),blueknight(200
),path,code,procid:BYTEDIM squares,square(8,2),diff_level:BYTETYPE registers=cc,a,b,dp:BYTE; x,y,u:INTEGERDIM regs:registersTYPE butt=name:STRING[7]; switch,hpos,vpos,length:INTEGERDIM button(6):buttDIM status:STRING[8]TYPE mouse_packet=valid,actv:BYTE; reserved1(3):INTEGER; cbsa,cbsb
:BYTE; reserved2(4),bdx,bdy:INTEGER; stat,res:BYTE; acx,acy,wrx,wry
:INTEGERDIM mouse:mouse_packetRUN guib("VERSION",status,1,0,i,j)IF status="BAD" THEN PRINT "Knights requires Guib 1.0 to run!"END ENDIF REM Turn scaling off so that GuiB draws the screen correctly.RUN gfx2("scalesw","off")blue=1red=2xx=24yy=16REM GuiB won't need any cursor left on for now.RUN gfx2("curoff")RUN gfx2("color",13,12,15)RUN gfx2("clear")RUN gfx2("palette",0,54)RUN gfx2("palette",1,52)RUN gfx2("palette",2,38)RUN gfx2("palette",3,36)RUN gfx2("palette",4,32)RUN gfx2("palette",5,4)RUN gfx2("palette",6,27)RUN gfx2("palette",7,25)RUN gfx2("palette",8,11)RUN gfx2("palette",9,9)RUN gfx2("palette",10,8)RUN gfx2("palette",11,1)REM The last four palettes are reserved for GuiB to use for its windows.RUN gfx2("palette",12,56)RUN gfx2("palette",13,7)RUN gfx2("palette",14,63)RUN gfx2("palette",15,0)RUN guib("WINDOW","SHADOWED",0,0,320,192)RUN guib("WINDOW","OUTLINED",198,48,75,103)REM Name the buttons that will appear on the screen.button(1).name=" UNDO  "button(2).name=" HINT  "button(3).name=" AUTO  "button(4).name="RESTART"button(5).name=" ABOUT "button(6).name=" QUIT  "REM Switch all the buttons to OFF.button(1).switch=0button(2).switch=0button(3).switch=0button(4).switch=0button(5).switch=0button(6).switch=0REM The width of each button is seven characters/columns.button(1).length=7button(2).length=7button(3).length=7button(4).length=7button(5).length=7button(6).length=7REM Give GuiB the horizontal and vertical positions of each button.REM NOTE: This is the "curxy" position of the button.button(1).hpos=26 \button(1).vpos=7button(2).hpos=26 \button(2).vpos=9button(3).hpos=26 \button(3).vpos=11button(4).hpos=26 \button(4).vpos=13button(5).hpos=26 \button(5).vpos=15button(6).hpos=26 \button(6).vpos=17REM Now display the buttons.FOR i=1 TO 6RUN guib("BUTTON",button(i).name,button(i).hpos,button(i).vpos,button
(i).switch,button(i).length)NEXT iRUN gfx2("color",15,12)RUN gfx2("curxy",1,1)PRINT "    THE KNIGHT'S TOUR"; RUN guib("WINDOW","FRAMED",xx,yy,153+2+5+5,153+2+5+5)REM Get group number for buffers.code=$0CRUN syscall(code,regs)procid=regs.aON ERROR GOTO 10RUN gfx2("killbuff",procid,0)10 ON ERROR xx=xx+5+1yy=yy+5+1RUN gfx2("color",15)RUN gfx2("bar",xx,yy,xx+152,yy+152)RUN gfx2("color",12)FOR i=0 TO 8RUN gfx2("line",xx,yy+i*19,xx+152,yy+i*19)NEXT iFOR j=0 TO 8RUN gfx2("line",xx+j*19,yy,xx+j*19,yy+152)NEXT jOPEN #path,"knights.dat":READGET #path,blueknightGET #path,redknightCLOSE #pathRUN gfx2("gpload",procid,blue,8,20,20,200)PUT #1,blueknightRUN gfx2("gpload",procid,red,8,20,20,200)PUT #1,redknightRUN gfx2("gcset",202,1)GOSUB 290FOR i=1 TO 8FOR j=1 TO 8board(i,j)=FALSENEXT jNEXT iFOR i=1 TO (VAL(RIGHT$(DATE$,2))+1)*(VAL(MID$(DATE$,13,2))+1)count=RND(0)NEXT icount=0REM Begin main routine.status="continue"WHILE status<>"quit" DO RUN guib("MOUSE","CLICK",i,j,mouse.bdx,mouse.bdy)mouse.cbsa=imouse.cbsb=jIF mouse.cbsa>0 THEN RUN gfx2("color",14,15)REM Did player click on board?IF mouse.bdx>=xx AND mouse.bdx<=xx+151 AND mouse.bdy>=yy AND mouse.bdy
<=yy+151 THEN i=(mouse.bdx-xx)/19+1j=(mouse.bdy-yy)/19+1IF board(i,j) THEN RUN gfx2("bell")GOTO 220ENDIF GOSUB 600IF NOT(legal) THEN RUN gfx2("bell")GOTO 220ENDIF GOSUB 500GOSUB 700IF count=64 THEN GOSUB 1000RUN gfx2("boldsw","on")PRINT PRINT "   YOU DID IT!"; FOR i=1 TO 20000 \NEXT iGOSUB 1200ENDIF ENDIF REM Did mouse click on command?FOR k=1 TO 6x1=button(k).hpos*8-4y1=button(k).vpos*8-4x2=x1+button(k).length*8+6y2=y1+14IF mouse.bdx>=x1 AND mouse.bdx<=x2 AND mouse.bdy>=y1 AND mouse.bdy
<=y2 THEN button(k).switch=1RUN guib("BUTTON",button(k).name,button(k).hpos,button(k).vpos,button
(k).switch,button(k).length)ON k GOTO 130,140,150,160,170,180REM Undo move.130 IF count=0 THEN RUN gfx2("bell")GOTO 135ENDIF RUN gfx2("color",15)x1=xx+(order(count,1)-1)*19+1y1=yy+(order(count,2)-1)*19+1RUN gfx2("bar",x1,y1,x1+17,y1+17)board(order(count,1),order(count,2))=FALSEcount=count-1IF count>0 THEN RUN gfx2("put",procid,red,xx+(order(count,1)-1)*19,yy+(order(count
,2)-1)*19)ENDIF 135 button(1).switch=0RUN guib("BUTTON",button(1).name,button(1).hpos,button(1).vpos,button
(1).switch,button(1).length)GOTO 220REM Give a hint.140 IF count=64 THEN RUN gfx2("bell")GOTO 147ENDIF IF count=0 THEN poss=1squares=1square(squares,1)=INT(RND(0)*8+1)square(squares,2)=INT(RND(0)*8+1)ELSE GOSUB 800ENDIF IF poss>0 THEN RUN gfx2("color",14)FOR i=1 TO squaresx1=xx+(square(i,1)-1)*19+1y1=yy+(square(i,2)-1)*19+1RUN gfx2("bar",x1,y1,x1+17,y1+17)NEXT iFOR i=1 TO 10000 \NEXT iRUN gfx2("color",15)FOR i=1 TO squaresx1=xx+(square(i,1)-1)*19+1y1=yy+(square(i,2)-1)*19+1RUN gfx2("bar",x1,y1,x1+17,y1+17)NEXT iELSE GOSUB 1000RUN gfx2("boldsw","on")PRINT PRINT " YOU'RE TRAPPED!"; FOR i=1 TO 20000 \NEXT iGOSUB 1200ENDIF 147 button(2).switch=0RUN guib("BUTTON",button(2).name,button(2).hpos,button(2).vpos,button
(2).switch,button(2).length)GOTO 220REM Auto mode.150 IF count=64 THEN RUN gfx2("bell")GOTO 157ENDIF IF count=0 THEN poss=1squares=1square(squares,1)=INT(RND(0)*8+1)square(squares,2)=INT(RND(0)*8+1)ELSE GOSUB 800ENDIF IF squares>1 THEN squares=INT(RND(0)*squares+1)ENDIF IF poss>0 THEN i=square(squares,1)j=square(squares,2)GOSUB 500GOSUB 700GOTO 150ELSE GOSUB 1000RUN gfx2("boldsw","on")PRINT PRINT "  NO MORE MOVES."; FOR i=1 TO 20000 \NEXT iGOSUB 1200ENDIF 157 button(3).switch=0RUN guib("BUTTON",button(3).name,button(3).hpos,button(3).vpos,button
(3).switch,button(3).length)GOTO 220REM Restart game.160 count=0RUN gfx2("color",15)FOR i=1 TO 8FOR j=1 TO 8IF board(i,j) THEN board(i,j)=FALSEx1=xx+(i-1)*19+1y1=yy+(j-1)*19+1RUN gfx2("bar",x1,y1,x1+17,y1+17)ENDIF NEXT jNEXT ibutton(4).switch=0RUN guib("BUTTON",button(4).name,button(4).hpos,button(4).vpos,button
(4).switch,button(4).length)GOTO 220REM Display game info.170 ON ERROR GOTO 175xpos=4ypos=2xsize=33ysize=20GOSUB 1100PRINT  \ PRINT PRINT " The Knight's Tour 01.00.00"; PRINT PRINT PRINT " (C) 1991, by Shawn Driscoll."; PRINT PRINT PRINT " Programmed in Basic09 for"; PRINT PRINT "       Multi-Vue."; PRINT PRINT PRINT " Feel free to give this code"; PRINT PRINT "    to other programmers."; PRINT PRINT PRINT PRINT PRINT "     Press any key"; GET #1,key175 ON ERROR GOSUB 1200button(5).switch=0RUN guib("BUTTON",button(5).name,button(5).hpos,button(5).vpos,button
(5).switch,button(5).length)GOTO 220REM We're done here.180 status="quit"GOTO 220ENDIF NEXT kENDIF 220 ENDWHILE GOSUB 300RUN gfx2("killbuff",procid,0)RUN gfx2("curon")RUN gfx2("color",14,15)RUN gfx2("clear")END 290 RUN guib("MOUSE","ON",0,0,0,0)RETURN 300 RUN guib("MOUSE","OFF",0,0,0,0)RUN gfx2("gcset",0,0)RETURN REM Place knight on board.500 IF count>0 THEN RUN gfx2("put",procid,blue,xx+(order(count,1)-1)*19,yy+(order(count
,2)-1)*19)ENDIF RUN gfx2("put",procid,red,xx+(i-1)*19,yy+(j-1)*19)RETURN REM Validate move.600 legal=FALSEIF count=0 THEN legal=TRUEELSE FOR x1=order(count,1)-2 TO order(count,1)+2 STEP 4FOR y1=order(count,2)-1 TO order(count,2)+1 STEP 2IF x1>=1 AND x1<=8 AND y1>=1 AND y1<=8 THEN IF i=x1 AND j=y1 THEN legal=TRUEENDIF ENDIF NEXT y1NEXT x1FOR x1=order(count,1)-1 TO order(count,1)+1 STEP 2FOR y1=order(count,2)-2 TO order(count,2)+2 STEP 4IF x1>=1 AND x1<=8 AND y1>=1 AND y1<=8 THEN IF i=x1 AND j=y1 THEN legal=TRUEENDIF ENDIF NEXT y1NEXT x1ENDIF RETURN 700 count=count+1order(count,1)=iorder(count,2)=jboard(i,j)=TRUERETURN REM Computer finds valid moves.800 poss=0FOR i=order(count,1)-2 TO order(count,1)+2 STEP 4FOR j=order(count,2)-1 TO order(count,2)+1 STEP 2IF i>=1 AND i<=8 AND j>=1 AND j<=8 THEN IF NOT(board(i,j)) THEN poss=poss+1loc(poss,1)=iloc(poss,2)=jENDIF ENDIF NEXT jNEXT iFOR i=order(count,1)-1 TO order(count,1)+1 STEP 2FOR j=order(count,2)-2 TO order(count,2)+2 STEP 4IF i>=1 AND i<=8 AND j>=1 AND j<=8 THEN IF NOT(board(i,j)) THEN poss=poss+1loc(poss,1)=iloc(poss,2)=jENDIF ENDIF NEXT jNEXT imoves=999FOR x1=1 TO possdiff_level=0FOR i=loc(x1,1)-2 TO loc(x1,1)+2 STEP 4FOR j=loc(x1,2)-1 TO loc(x1,2)+1 STEP 2IF i>=1 AND i<=8 AND j>=1 AND j<=8 THEN IF NOT(board(i,j)) THEN diff_level=diff_level+1ENDIF ENDIF NEXT jNEXT iFOR i=loc(x1,1)-1 TO loc(x1,1)+1 STEP 2FOR j=loc(x1,2)-2 TO loc(x1,2)+2 STEP 4IF i>=1 AND i<=8 AND j>=1 AND j<=8 THEN IF NOT(board(i,j)) THEN diff_level=diff_level+1ENDIF ENDIF NEXT jNEXT iIF diff_level>moves THEN 890IF diff_level<moves THEN squares=1moves=diff_levelELSE IF diff_level=moves THEN squares=squares+1ENDIF ENDIF square(squares,1)=loc(x1,1)square(squares,2)=loc(x1,2)890 NEXT x1RETURN REM Display overlay.1000 xpos=11ypos=9xsize=20ysize=5GOSUB 1100RETURN 1100 GOSUB 300RUN gfx2("owset",1,xpos,ypos,xsize,ysize,15,12)RUN guib("WINDOW","SHADOWED",0,0,xsize*8,ysize*8)RUN guib("WINDOW","FRAMED",2,2,xsize*8-4,ysize*8-4)RUN gfx2("owset",1,xpos+1,ypos+1,xsize-2,ysize-2,15,12)RETURN 1200 RUN gfx2("owend")RUN gfx2("owend")RUN gfx2("gcset",202,1)GOSUB 290RETURN 