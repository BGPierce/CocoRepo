Documentation for GuiB: GUI 1.1 for Basic09.Designed by Shawn Driscoll, (C) 1991.AN OVERVIEWFirst, let me clarify what it is that I'm doing here.  Maybe GUI isn't thecorrect term to describe GuiB?  After all, GuiB by itself is not a GUI,technically.  Multi-Vue by itself is a GUI.  It can run on its own with nohelp from other programs.  GuiB is a different animal in that it is not aprogram that runs on its own.  It is a subprogram that gets called on byother programs.  GuiB is a set of programming tools that allows a programmerto incorporate buttons, arrows, scroll bars, etc., into his applicationswithout much hassle.  GuiB allows programmers to design GUI's.GuiB gives the CoCo 3 a modern looking GUI for future OS-9 Level IIapplications.  If you've seen X-Windows for UNIX, then you already have anidea of how GuiB will make your programs look.Programs that make calls to GuiB (the current version is 1.1) must first bestarted from Multi-Vue's GShell screen by double-clicking on their icons.This is so that Multi-Vue can pass on palette and mouse environment informationto the program that is calling GuiB.  GuiB itself does not perform any mouseinitializing or palette changing.  The changing of palettes is left to theapplication program to perform if necessary.GuiB makes use of the palette registers 12-15 and requires a 320x192 16-color,non-scaled window to run in.  Programmers can have their applications assignthe palette registers from data stored in their code or from register colordata stored in the EARTH.SYS file.  By storing the color settings in theEARTH.SYS file, users will be able to change the palettes to their liking.THE COMMAND SETGuiB has a few commands that can be called on by applications to achieve aworkable graphical interface.  GuiB requires six PARAMs in order to performsomething requested by an application.  The first two PARAMs are strings(60 characters in length) and the last four PARAMs are integers.  Here is alist of the GuiB commands along with their features:              MAKEBAR           WINDOW             TITLE              =======           ======             =====              HORIZ             FRAMED             Title Name              VERT              RAISED/OUTLINED                                DROPPED                                SHADOWED                                ETCHED              MOVEBAR           MOUSE              VERSION              =======           =====              =======              HORIZ             CLICK              Status              VERT              ON                                OFF              ARROW             BUTTON             SQUARE              =====             ======             ======              UP                Button Name        FILLED              DOWN                                 OUTLINED              LEFT                                 PUSHED              RIGHT                                POPPEDWINDOW is used to modify the look of a window on a screen.MOUSE is used to turn the mouse on or off and to find the location of themouse when it is clicked.BUTTON is used to display menu buttons that can be clicked on or off.  Theyare similar to the buttons on a SONY stereo.VERSION is used to verify that the current version of GuiB is the right onefor a particular application.MAKEBAR creates a scroll bar for an application.MOVEBAR updates a scroll bar.TITLE allows programmers to give their applications a title name.SQUARE allows programs to draw outlined or filled boxes on the screen usingthe same coordinates as the WINDOW commands.ARROW displays an arrow for use with scroll bars.------------------------------------------------------------------------  RUN Guib("WINDOW","FRAMED",Xpos,Ypos,Xsize,Ysize)Draws a box on the screen with a frame around it (shaded for 3-D effect).  RUN GuiB("WINDOW","RAISED",Xpos,Ypos,Xsize,Ysize)Draws a raised outline around a given area.  OUTLINED does the same thing.  RUN GuiB("WINDOW","DROPPED",Xpos,Ypos,Xsize,Ysize)Draws a sunken outline around a given area.  RUN GuiB("WINDOW","SHADOWED",Xpos,Ypos,Xsize,Ysize)Draws a higher outline around a given area.  RUN GuiB("WINDOW","ETCHED",Xpos,Ypos,Xsize,Ysize)Draws a box that appears to look etched in.----------------------------------------------------------------------  RUN GuiB("SQUARE","FILLED",Xpos,Ypos,Xsize,Ysize)Draws a filled-in sqaure using the current forground color.  RUN GuiB("SQUARE","OUTLINED",Xpos,Ypos,Xsize,Ysize)Draws an outline of a square using the current forground color.  RUN GuiB("SQUARE","PUSHED",Xpos,Ypos,Xsize,Ysize)Draws a square that is pushed in a bit.  RUN GuiB("SQUARE","POPPED",Xpos,Ypos,Xsize,Ysize)Draws a square that is popped out a bit.-----------------------------------------------------------------------  RUN GuiB("MOUSE","CLICK",Button1,Button2,Xmouse,Ymouse)Button1 or Button2 is > 0 if button is pressed.Xmouse = horizontal pixel of mouse.Ymouse = vertical pixel of mouse.  RUN GuiB("MOUSE","ON",0,0,0,0)Turns mouse on.  RUN GuiB("MOUSE","OFF",0,0,0,0)Turns mouse off.--------------------------------------------------------------------  RUN GuiB("BUTTON",Name$,Xpos,Ypos,Switch,Length)Displays a button at "curxy" Xpos,Ypos.Name$ = The name on the button.Switch = 1 (on) or 0 (off).Length = width of button (number of columns wide).---------------------------------------------------------------------RUN GuiB("TITLE",Name$,Xpos,Ypos,Switch,Length)Similar to BUTTON except that the background for the center of thetitle box is different than what BUTTON uses and the title name isalways highlighted.---------------------------------------------------------------------RUN GuiB("ARROW","UP",Xpos,Ypos,0,0)Draws and UP arrow at location: Xpos, Ypos.  Other arrow types areDOWN, LEFT, and RIGHT.----------------------------------------------------------------------RUN GuiB("MAKEBAR","HORIZ",Xpos,Ypos,Length,0)Displays a horizontal framed box at location: Xpos,Ypos (so many pixels inLength).  The Length should be no less than 32.RUN GuiB("MOVEBAR","HORIZ",Xpos,Ypos,Length,percentage)Displays a scroll bar inside of a horizontal framed box that is locatedat: Xpos,Ypos (and is so many pixels in length, but no less than 32).Percentage = 0-100NOTE: Both MOVEBAR and MAKEBAR can be used to create vertical scroll bars byusing "VERT" instead of "HORIZ".  The width of the framed boxes used by thescroll bars is the same as the width of buttons, titles, and arrows (16pixels).--------------------------------------------------------------------  RUN GuiB("VERSION",Status$,A,B,C,D)If an application needed GuiB version 3.1 in order to work, then:A = 3B = 1C = value returned by GuiB (hopefully the same value as A).D = value returned by GuiB (hopefully the same value as B).Status$ = value returned by GuiB (either "GOOD" or "BAD").NOTE: C and D will return the actual version number of the current GuiB.----------------------------------------------------------------------NOTE: The "0" values used in some of the GuiB commands above mean that GuiBmakes no use of the particular PARAM.  Future versions of GuiB might make useof the PARAMs, though.  For now, just plug in values of "0".GUIB'S ENVIRONMENTAt the present time, GuiB assumes that it is running on a 40 x 24 type 8screen.  Scaling should be turned off so that the pixels are adjusted to320 x 192.  Unexpected performance will result if GuiB is run on any screentype other than 8.UPDATE HISTORYGuiB 1.1 now supports scroll bars and arrows.  The scroll bars and arrowsrequire the SYS/StdPats_16 file to be merged into memory for them to work.Titles have also been added so that a window can have a program title. Outlinedand filled squares are now easier to create using GuiB rather than Gfx2.Pushed and popped boxes are now supported (these boxes have a border of 1pixel wide when compared to dropped or raised boxes which have borders of2 pixels wide).Enjoy!Shawn Driscoll    12/02/91DELPHI: Earther