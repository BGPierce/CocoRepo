Documentation for GuiB: GUI for Basic09Designed by Shawn Driscoll, (C) 1991.AN OVERVIEWIt started about a year ago when (after patching my Gshell to death sothat it would look better on my screen) I decided that WindInt's built-inmenu/window commands were just not cutting it.  I had seen what other systems were using for their GUI's and I liked what I saw.  UNIX machineswere using X/Windows and the Amiga had LightWave doing neat things.  The3-D shaded buttons and window frames got my attention!  I wanted somethingsimilar running for OS-9 Level II on my CoCo 3 system.To do this, I had to write my own GUI from scratch (well... almost).  Ihad Gfx2 and Syscall to help me out with some of the nitty-gritty stuffwhich I had no desire to re-write because it worked just fine.  Anyway...after writing a few applications for Multi-Vue, I noticed that I had a lotof the same code in my programs.  Each program had GOSUBS to routines thatdisplayed overlay windows, to mouse routines, and to menu command displays.I thought that this redundant code could be collected together and putinto just one module that each of my applications would then make calls to.This would make my applications smaller in code size and also help me withcreating a standard way of displaying menus and windows and utilizing themouse.I admit that it did take me a while to come up with a look-and-feel formy GUI for Basic09.  GUI's can become very big in code size and begin toslow down applications.  I didn't want that, so I kept the GUI small andsimple.THE COMMAND SETGuiB has a few commands that can be called on by applications to achievea workable graphical interface.  GuiB requires six PARAMs in order toperform something requested by an application.  The first two PARAMs arestrings and the last four PARAMs are integers.  Here is a list of GuiBcommands:               WINDOW     MOUSE     BUTTON     VERSIONWINDOW is used to display or modify the look of a window on a screen.MOUSE is used to turn the mouse on or off and to find the location ofthe mouse when it is clicked.BUTTON is used to display menu buttons that can be clicked on or off.They are similar to the buttons on a SONY stereo.VERSION is used to verify that the current version of GuiB is the rightone for a particular application.  RUN Guib("WINDOW","FRAMED",Xpos,Ypos,Xsize,Ysize)Draws a box on the screen with a frame around it (shaded for 3-D effect).  RUN GuiB("WINDOW","OUTLINED",Xpos,Ypos,Xsize,Ysize)Draws a raised outline around a given area.  RUN GuiB("WINDOW","SHADOWED",Xpos,Ypos,Xsize,Ysize)Draws a deeper outline around a given area.  RUN GuiB("MOUSE","CLICK",Button1,Button2,Xmouse,Ymouse)Button1 or Button2 is > 0 if button is pressed.Xmouse = horizontal pixel of mouse.Ymouse = vertical pixel of mouse.  RUN GuiB("MOUSE","ON",0,0,0,0)Turns mouse on.  RUN GuiB("MOUSE","OFF",0,0,0,0)Turns mouse off.  RUN GuiB("BUTTON",Name$,Xpos,Ypos,Switch,Length)Displays a button at "curxy" Xpos,Ypos.Name$ = The name on the button.Switch = 1 (on) or 0 (off).Length = width of button (number of columns wide).  RUN GuiB("VERSION",Status$,A,B,C,D)If an application needed GuiB version 3.1 in order to work, then:A = 3B = 1C = value returned by GuiB (hopefully the same value as A).D = value returned by GuiB (hopefully the same value as B).Status$ = value returned by GuiB (either "GOOD" or "BAD").NOTE: C and D will return the actual version number of the current GuiB.GUIB'S ENVIRONMENTAt the present time, GuiB assumes that it is running on a 40 x 24 type 8screen.  Scaling should be turned off so that the pixels are adjustedto 320 x 192.  Unexpected performance will result if GuiB is run on anyscreen type other than 8.  NOTE: You will need to play around with values passed to GuiB by the      WINDOW and BUTTON commands so that you can see just how GuiB       positions objects on the screen.  Perhaps a future version of GuiB      will draw the button names rather than print them so that a            button's location on the screen would not be restricted to just      text character positions?Enjoy!      Shawn Driscoll    10/08/91DELPHI: Earther