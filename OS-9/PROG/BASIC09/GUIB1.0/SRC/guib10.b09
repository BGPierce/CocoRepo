PROCEDURE GuiBREM *REM *    GuiB: GUI for Basic09REM *REM *    Designed by Shawn Driscoll, (C) 1991.REM *REM *    This module makes the programmer's life a littleREM *    easier when it comes to designing layouts forREM *    new applications.  The GUI has a more modern lookREM *    to it which can be compared to GUI's used by mostREM *    popular computer systems.REM *    REM *    This version of GuiB is designed to run on type 8REM *    screens only.REM *REM *    NOTE: Multi-Vue must be up and running firstREM *          before any application requiring GuiB canREM *          be executed.REM *    REM *    It is recommended that Syscall and Gfx2 be mergedREM *    with RunB for this module to work properly.REM *REM *    Feel free to give this source code to other REM *    programmers.  You are allowed to modify the codeREM *    as you see fit.  I'm sure there are still a lotREM *    of improvements that can be made to GuiB.  Let meREM *    know what you come up with.  I can be contactedREM *    on DELPHI, username: EARTHER.  Or you can write to:REM * REM *    Shawn DriscollREM *    6338 Lake AthabaskaREM *    San Diego, CA  92119REM *    Voice: (619)589-9496REM * REM *PARAM command,flag:STRING[60]PARAM xx,yy,xxx,yyy:INTEGERTYPE registers=cc,a,b,dp:BYTE; x,y,u:INTEGERTYPE mouse_packet=valid,actv:BYTE; reserved1(3):INTEGER; cbsa,cbsb
:BYTE; reserved2(4),bdx,bdy:INTEGER; stat,res:BYTE; acx,acy,wrx,wry
:INTEGERDIM regs:registersDIM mouse:mouse_packetDIM code,width:BYTEDIM x1,x2,x3,y1,y2,y3:INTEGERREM Mouse status.IF command="MOUSE" THEN IF flag="CLICK" THEN regs.a=1regs.b=$89regs.x=ADDR(mouse)regs.y=0code=$8DRUN syscall(code,regs)IF mouse.valid=0 THEN REM Mouse sleeps for awhile.regs.x=20code=$0ARUN syscall(code,regs)xx=0yy=0END ELSE xx=mouse.cbsayy=mouse.cbsbxxx=mouse.bdx/2yyy=mouse.bdyEND ENDIF ENDIF IF flag="ON" THEN regs.a=1regs.b=$89regs.x=$030Aregs.y=1code=$8ERUN syscall(code,regs)END ENDIF IF flag="OFF" THEN regs.a=1regs.b=$89regs.x=$030Aregs.y=0code=$8ERUN syscall(code,regs)END ENDIF ENDIF REM Display button.IF command="BUTTON" THEN RUN gfx2("curxy",xx,yy)x1=xx*8-4 \y1=yy*8-4x2=x1+yyy*8+6 \y2=y1+14IF xxx=0 THEN RUN gfx2("color",15,12)PRINT flagRUN gfx2("color",13)RUN gfx2("line",x2,y1,x2,y2)RUN gfx2("line",x1,y2)RUN gfx2("color",14)RUN gfx2("line",x1,y1)RUN gfx2("line",x2,y1)END ELSE RUN gfx2("color",14,12)PRINT flagRUN gfx2("line",x2,y1,x2,y2)RUN gfx2("line",x1,y2)RUN gfx2("color",13)RUN gfx2("line",x1,y1)RUN gfx2("line",x2,y1)END ENDIF ENDIF REM Beautify a window.IF command="WINDOW" THEN IF flag="FRAMED" THEN width=5x3=xx+xxx-1y3=yy+yyy-1x1=xx+width \y1=yy+widthx2=x3-width \y2=y3-widthRUN gfx2("color",13)RUN gfx2("line",x3,yy,x3,y3)RUN gfx2("line",xx,y3)RUN gfx2("color",14)RUN gfx2("line",xx,yy)RUN gfx2("line",x3,yy)RUN gfx2("line",x2,y1,x2,y2)RUN gfx2("line",x1,y2)RUN gfx2("color",13)RUN gfx2("line",x1,y1)RUN gfx2("line",x2,y1)END ENDIF IF flag="OUTLINED" THEN x1=xxy1=yyx3=xxxy3=yyyGOSUB 500END ENDIF IF flag="SHADOWED" THEN x1=xxy1=yyx3=xxxy3=yyyGOSUB 500x1=xx+1y1=yy+1x3=xxx-2y3=yyy-2GOSUB 500END ENDIF ENDIF REM Verify version 1.0IF command="VERSION" THEN IF xx=1 AND yy=0 THEN flag="GOOD"xxx=xxyyy=yyELSE flag="BAD"xxx=1yyy=0ENDIF ENDIF END 500 x2=x1+x3-1y2=y1+y3-1RUN gfx2("color",13)RUN gfx2("line",x2,y1,x2,y2)RUN gfx2("line",x1,y2)RUN gfx2("color",14)RUN gfx2("line",x1,y2,x1,y1)RUN gfx2("line",x2,y1)RETURN END 