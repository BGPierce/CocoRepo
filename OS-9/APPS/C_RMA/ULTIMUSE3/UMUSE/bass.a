* file ~VMEM640/bass.a     Assembly for bmuse (not Play) psect bass_a,0,0,0,0,0 nam bass_a* strup(), strevent(), cpynote(), strdn(). * STRASS.A  Up & Down version of _strass(dest, src, nbytes) */*NOTE: As of 90/10/18, nobody uses strup() anymore! ifne 0* Move array UP, so work from top down */* strup(dst, src, nby)*   char *dst, *src;   int nby; ttl strupstrup:* *     U == sp, X == dp* *     X = dp = dst + nby; ldd 2,s  Dst ldx 6,s  nby leax d,x* *     sp = src + nby;* Note D for address, U for offset -- Moto don't care! ldd 4,s  Src* speed up the loop, compare to D=Src on stack top pshs u,d      Save U just for caller ldu 10,s  Nby again leau d,u  U = dp = dst + nby* *     for( ; sp > src; ) bra utest* *          *(--dp) = *(--sp);uloop ldb ,-u stb ,-xutest cmpu ,s  NOTE: cmpx is faster! bhi uloop* puls d,u,pc* end strup() endc* strdn(dst, src, nby)* A tad faster than strup, since less init'ing.* Move array DOWN, so work from bottom up*/ ttl strdnstrdn:* *     char *quit;  ==0,S ldd 4,s  Src     quit = src + nby; addd 6,s Nby pshs u,d Quit to stack top, U for caller ldx 8,s  X = Src ldu 6,s  U = Dst bra testloop ldb ,x+  *dp++ = *sp++; stb ,u+test cmpx ,s     while(sp < quit) blo loop puls u,d,pc* evsup1(from, nbytes)* Move an array of Events at Arg1 up one event;* Arg2 is size to be moved IN BYTES, not events!* Work from top down. ttl evsup1evsup1: ldd 4,s  Nbytes ldx 2,s  From pshs x   for faster comparison leax d,x Now the "To" addr = From+Nbytes bra evuptst*evuploop ldd -8,x std ,x ldd -6,x std 2,x ldd -4,x std 4,x ldd -2,x std 6,x* leax -8,xevuptst cmpx ,s      while(destptr > From) bhi evuploop puls x,pc* evsdn1(to, nbytes)  As above, but move 'em DOWN one.* Work from bottom up.* To+Nbytes = First destination not moved to ttl evsdn1evsdn1: ldx 2,s  To_addr ldd 4,s  Nbytes addd 2,s  Final dest ptr pshs d   Easy comparison bra evdntst   In case nbytes==zeroevdnloop ldd 8,x std ,x ldd 10,x std 2,x ldd 12,x std 4,x ldd 14,x std 6,x leax 8,xevdntst cmpx ,s    while(dstptr < to+nbytes) blo evdnloop puls d,pc* cpynote(dst, src)* Hardwired to sizeof(note) == 5 ttl cpynotecpynote: pshs u ldu 6,s       * src ldx 4,s       * dst ldd ,u std ,x ldd 2,u std 2,x ldb 4,u stb 4,x puls u,pc* end cpynote()* Hardwired to sizeof(event) == 8* strevent(dst, src) ttl streventstrevent: pshs u ldu 6,s       * src ldx 4,s       * dst ldd ,u std ,x ldd 2,u std 2,x ldd 4,u std 4,x ldd 6,u std 6,x puls u,pc* end strevent() endsect* eof ~VMEM640/bass.a