* file ~Wm640/FPIX.A    RawBits graphic raster blasters psect fpix_a,0,0,0,0,0 nam fpix_aF$CpyMem equ $1BF$MapBlk equ $4FF$Sleep equ $0ASS.Mouse equ $89I$GetStt equ $8D************ BITBLITTERSdynword MACRO  *Move a word from image to grafix screen ldd \1*2,x std \1*80,u ENDMorword MACRO  *OR a word from image into grafix screen ldd \1*80,u ora \1*2,x orb \1*2+1,x std \1*80,u ENDM** Use for Barlines** dyna2_15(dst, src)  Copy 15 Words (2 bytes) to dst (assumed graphics)** dst=4, src=6 off stack.  Both are (int*).*  ttl dyna2_15* dyna2_15:* pshs u* ldu 4,s* ldx 6,s* ldd ,x* std ,u* dynword 1* dynword 2* dynword 3* dynword 4* dynword 5* dynword 6* dynword 7* dynword 8* dynword 9* dynword 10* dynword 11* dynword 12* dynword 13* dynword 14* puls u,pc** end dyna2_15* Use for Barlines after 89/5/22* or2_15(dst, src)  Steals most code from or2_16(), below ttl or2_15or2_15: pshs u ldu 4,s  dest ldx 6,s  src leau -80,u    Fudge for starting from "orword 1" steda 0 leax -2,x bra or2_15a* Use for Notes & Rests* or2_16(dst, src)  OR 16 Words (2 bytes) to dst (assumed graphics)* dst=4, src=6 off stack.  Both are (int*). ttl or2_16or2_16: pshs u ldu 4,s ldx 6,s orword 0or2_15a: orword 1 orword 2 orword 3 orword 4 orword 5 orword 6 orword 7 orword 8 orword 9 orword 10 orword 11 orword 12 orword 13 orword 14 orword 15 puls u,pc* end or2_16* *  Up & Down version of _strass(dest, src, nbytes) */*NOTE: As of 90/10/18, nobody uses strup() anymore! ifne 0* Move array UP, so work from top down */* strup(dst, src, nby)*   char *dst, *src;   int nby; ttl strupstrup:* *     U == sp, X == dp* *     X = dp = dst + nby; ldd 2,s  Dst ldx 6,s  nby leax d,x* *     sp = src + nby;* Note D for address, U for offset -- Moto don't care! ldd 4,s  Src* speed up the loop, compare to D=Src on stack top pshs u,d      Save U just for caller ldu 10,s  Nby again leau d,u  U = dp = dst + nby* *     for( ; sp > src; ) bra utest* *          *(--dp) = *(--sp);uloop ldb ,-u stb ,-xutest cmpu ,s  NOTE: cmpx is faster! bhi uloop* puls d,u,pc* end strup() endc* strdn(dst, src, nby)* faster than strup* Move array DOWN, so work from bottom up*/ ttl strdnstrdn:* *     char *quit;  ==0,S ldd 4,s  Src     quit = src + nby; addd 6,s Nby pshs u,d Quit to stack top, U for caller ldx 8,s  X = Src ldu 6,s  U = Dst bra testloop ldb ,x+  *dp++ = *sp++; stb ,u+test cmpx ,s     while(sp < quit) blo loop puls u,d,pc* 95/9/11 Code to find Block No. of current NON-VDG TRype 5 Window*  map its 2 blocks into user RAM, and leave its base addr in <vdgram.* 95/9/18 Mouse active-window safety check added -- needed!!!* C/o Robert Gault ab282@detroit.freenet.org ttl mapwinmwbuff equ hgtmwblock equ arg3mapwin: pshs u,y* Call mouse to make sure our window is currently displayedmapwait lda #1        stdout path ldb #SS.Mouse ldx #space    borrow huge window-save buffer ldy #$101     what Bill uses, otherwise #0 os9 I$GetStt tst ,x        Pt.Valid; 1==Yes, our window is showing bne mapdo     OK, go ahead ldx #10       1/6 sec to be "nice" os9 F$Sleep bra mapwait* Copy OS9's image of video refresh base address mapdo* ldx #3* os9 F$Sleep   Bob Gault sez let system settle; I say less safe! ldd #0        Dummy zero MMU Block std <mwbuff   2-byte int in bdp.c ldd #mwbuff   sys call needs its addr ldx #$9B      sys mem loca to copy ldu #mwblock  3 bytes to receive result ldy #3        # bytes to copy os9 F$CpyMem bcc mwcopy    OK ldu #0        Error, stuff NULL bra gotmapmwcopy lda <mwblock   Disto's hi byte from $9B ldb <mwblock+2 Mid byte from $9D lsra           div by 4 rorb lsra rorb std <mwblock+1     overwrites used data at $9C, 9D* Map in screen     MMU blocks, just like a VDG screen ldx <mwblock+1     starting MMU-block no. ldb #2             Map in 2 blocks for Type 5 640x2 os9 F$MapBlk       returns your phys addr in U bcc gotmap         if no error ldu #0             stuff NULL on errorgotmap stu <vdgram        Fran's old briar patch, still same meaning puls u,y,pc  endsect* eof ~Wm640/fpix.a