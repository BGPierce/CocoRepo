 TITL1 "BOX/TXT"* BOX/TXT - part of LyraRecorder* (C) 1988 by Lester Hands* Box structure: (all 16-bit words)*   X,Y - upper left hand position*   Width,Height*   TextPointer*   InputPointer* Text structure: (all 16-bit words)*   X,Y - position relative to box upper left hand*   TxtPtr - pointer to null terminated string*   NxtPtr - pointer to next Text structure* Input structure (all 16-bit words)*   X,Y - position relative to box upper left hand*   InpPtr - pointer to null terminated strng that*            will accept input*   NxtPtr - pointer to next Input structure*   PrvPtr - pointer to previous Input structureBOXBUFR RMB 512 box bufferACOLOR FCB $60BCOLOR FCB $60* Display a dialog box on the text screen* LOCAL L_CURSSetBox PROC S_BPTR LDD CURSADR STD L_CURS,S LDX S_BPTR,S LDD 0,X get X position STB XPOS,PCR LDD 2,X get Y position STB YPOS,PCR LBSR MOVE CALL SaveBox,(4,X),(6,X),#BOXBUFR CALL ClearBox,(4,X),(6,X) CALL BoxBordr,(4,X),(6,X) CALL BText,(8,X) CALL BText,(10,X) LDD L_CURS,S STD CURSADR LBSR GETPOS ENDP* Display a menu box on the text screen* LOCAL L_CURSSetMenu PROC S_BPTR LDD CURSADR STD L_CURS,S LDX S_BPTR,S LDD 0,X get X position STB XPOS,PCR LDD 2,X get Y position STB YPOS,PCR LBSR MOVE CALL SaveBox,(4,X),(6,X),#BOXBUFR CALL ClearBox,(4,X),(6,X) CALL MenuBord,(4,X),(6,X) CALL BText,(8,X) CALL BText,(10,X) LDD L_CURS,S STD CURSADR LBSR GETPOS ENDP* Restore the screen after a box display.* Unlike most routines, this one preserves D.* This is done so input from getchar or BoxInp* is preserved.*ClrBox PSHS D CALL RestBox,#BOXBUFR PULS D,PC* display box text* the cursor is positioned at the upper left corner* LOCAL L_CURSBText PROC S_PTR LDD CURSADR STD L_CURS,S LDX S_PTR,S BEQ Z@A@ LDD L_CURS,S STD CURSADR CALL TRMove,(0,X),(2,X) LDY 4,X get TxtPtrB@ LDA ,Y+ BEQ C@ LBSR ChrOut  BRA B@C@ LDX 6,X get NxtPtr BNE A@ LDD L_CURS,S STD CURSADRZ@ ENDP* Text screen cursor relative move*TRMove PROC S_X,S_Y LDD S_Y,S LDA #SCRNWIDE MUL ADDD S_X,S ADDD CURSADR STD CURSADR ENDP* Save a rectangular area of the text screen* Cursor is positioned at upper left hand corner* SaveBox(wide,high,bufr)* LOCAL L_XCNT,L_YCNT,L_CURSSaveBox PROC S_WIDE,S_HIGH,S_BUFR LDD CURSADR STD L_CURS,S LDY S_BUFR,S STD ,Y++ LDD S_WIDE,S STD ,Y++ LDD S_HIGH,S STD ,Y++ STB L_YCNT,SA@ LDX CURSADR LDD S_WIDE,S STB L_XCNT,SB@ LDA ,X+ STA ,Y+ DEC L_XCNT,S BNE B@ CALL TRMove,#0,#1 DEC L_YCNT,S BNE A@Z@ LDD L_CURS,S STD CURSADR ENDP* Restore text screen from buffer* RestBox(bufr)* LOCAL L_WIDE,L_HIGH,L_Y,L_CURSRestBox PROC S_BUFR LDD CURSADR STD L_CURS,S LDX S_BUFR,S LDD ,X BEQ Z@ STD CURSADR CLRA CLRB STD ,X++ LDD ,X++ STB L_WIDE,S LDD ,X++ STB L_HIGH,SA@ LDB L_WIDE,S LDY CURSADRB@ LDA ,X+ STA ,Y+ DECB BNE B@ PSHS X CALL TRMove,#0,#1 PULS X DEC L_HIGH,S BNE A@Z@ LDD L_CURS,S STD CURSADR ENDP* Clear a rectangular area of text* Cursor is positioned at upper left corner* ClearBox(wide,high)* LOCAL L_XCNT,L_YCNT,L_CURSClearBox PROC S_WIDE,S_HIGH LDD CURSADR STD L_CURS,S LDD S_HIGH,S DECB STB L_YCNT,SA@ LDX CURSADR LDD S_WIDE,S STB L_XCNT,SB@ LDA BCOLOR,PCR STA ,X+ DEC L_XCNT,S BNE B@ CALL TRMove,#0,#1 DEC L_YCNT,S BNE A@Z@ LDD L_CURS,S STD CURSADR ENDP* put a border on a box* cursor at upper left corner* LOCAL L_CURS,L_HIGHBoxBordr PROC S_WIDE,S_HIGH LDD CURSADR STD L_CURS,S* top line LDX CURSADR LDD S_WIDE,S LDA #$81 STA ,X+ DECB LDA #$83A@ STA ,X+ DECB BNE A@ LDA #$82 STA -1,X* sides LDD S_HIGH,S SUBB #2 STB L_HIGH,SB@ PSHS B CALL TRMove,#0,#1 PULS B LDX CURSADR LDD S_WIDE,S DECB LDA #$85 STA ,X LDA #$8A STA B,X DEC L_HIGH,S BNE B@* bottom CALL TRMove,#0,#1 LDX CURSADR LDD S_WIDE,S LDA #$84 STA ,X+ DECB LDA #$8CC@ STA ,X+ DECB BNE C@ LDA #CURSADR STA -1,X LDD L_CURS,S STD CURSADR ENDP* put a border on a menu box* cursor at upper left corner* LOCAL L_CURS,L_HIGHMenuBord PROC S_WIDE,S_HIGH LDD CURSADR STD L_CURS,S* sides LDD S_HIGH,S SUBB #1 STB L_HIGH,SB@ LDX CURSADR LDD S_WIDE,S DECB LDA #$85 STA ,X LDA #$8A STA B,X CALL TRMove,#0,#1 DEC L_HIGH,S BNE B@* bottom LDX CURSADR LDD S_WIDE,S LDA #$84 STA ,X+ DECB LDA #$8CC@ STA ,X+ DECB BNE C@ LDA #CURSADR STA -1,X LDD L_CURS,S STD CURSADR ENDP* get input for a box structure* returns the last keypress* LOCAL L_CURS,L_X,L_Y,L_KEY,L_LENBoxInp PROC S_PTR LDD CURSADR STD L_CURS,S LDX S_PTR,S LDD 0,X get box XPOS STD L_X,S LDD 2,X get box YPOS STD L_Y,S LDX 10,X get input ptr.A@ LDD 0,X ADDD L_X,S STB XPOS,PCR LDD 2,X ADDD L_Y,S STB YPOS,PCR LBSR MOVE CALL StrLen,(4,X) STD ARG2,PCR STD L_LEN,S CALL GetStr,(4,X),ARG2 STD L_KEY,S LDD L_LEN,S STD ARG1 CALL StrPad,(4,X),ARG1 LDD L_KEY,S CMPB #BREAK BEQ Z@ CMPB #UP BNE B@ LDD 8,X CMPD #0 BEQ A@ TFR D,X BRA A@B@ CMPB #DOWN BNE C@ LDD 6,X CMPD #0 BEQ A@ TFR D,X BRA A@C@ CMPB #13 BNE A@Z@ LDD L_CURS,S STD CURSADR LBSR GETPOS LDD L_KEY,S ENDP* end of file: BOX/TXT